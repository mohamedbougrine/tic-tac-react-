{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\BOUGRINE\\\\Desktop\\\\Tic tac Mo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import{createContext,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var ModalContext=/*#__PURE__*/createContext();var ModalState=function ModalState(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),show=_useState2[0],setShow=_useState2[1];var _useState3=useState(\"winner\"),_useState4=_slicedToArray(_useState3,2),mode=_useState4[0],setMode=_useState4[1];// start || winner\nvar showModal=function showModal(){return setShow(true);};var hideModal=function hideModal(){return setShow(false);};return/*#__PURE__*/_jsx(ModalContext.Provider,{value:{show:show,modaleModel:mode,showModal:showModal,hideModal:hideModal,setModalMode:setMode},children:props.children});};export{ModalContext,ModalState};","map":{"version":3,"sources":["C:/Users/BOUGRINE/Desktop/Tic tac Mo/src/context/ModalContext.js"],"names":["createContext","useState","ModalContext","ModalState","props","show","setShow","mode","setMode","showModal","hideModal","modaleModel","setModalMode","children"],"mappings":"oIAAA,OAASA,aAAT,CAAwBC,QAAxB,KAAwC,OAAxC,C,2CAEA,GAAMC,CAAAA,YAAY,cAAGF,aAAa,EAAlC,CAEA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAC5B,cAAwBH,QAAQ,CAAC,KAAD,CAAhC,wCAAOI,IAAP,eAAaC,OAAb,eACA,eAAwBL,QAAQ,CAAC,QAAD,CAAhC,yCAAOM,IAAP,eAAaC,OAAb,eAA4C;AAE5C,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,SAAMH,CAAAA,OAAO,CAAC,IAAD,CAAb,EAAlB,CACA,GAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,SAAMJ,CAAAA,OAAO,CAAC,KAAD,CAAb,EAAlB,CAEA,mBACE,KAAC,YAAD,CAAc,QAAd,EACE,KAAK,CAAE,CACLD,IAAI,CAAJA,IADK,CAELM,WAAW,CAAEJ,IAFR,CAGLE,SAAS,CAATA,SAHK,CAILC,SAAS,CAATA,SAJK,CAKLE,YAAY,CAAEJ,OALT,CADT,UASGJ,KAAK,CAACS,QATT,EADF,CAaD,CApBD,CAsBA,OAASX,YAAT,CAAuBC,UAAvB","sourcesContent":["import { createContext, useState } from \"react\";\n\nconst ModalContext = createContext();\n\nconst ModalState = (props) => {\n  const [show, setShow] = useState(false);\n  const [mode, setMode] = useState(\"winner\"); // start || winner\n\n  const showModal = () => setShow(true);\n  const hideModal = () => setShow(false);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        show,\n        modaleModel: mode,\n        showModal,\n        hideModal,\n        setModalMode: setMode,\n      }}\n    >\n      {props.children}\n    </ModalContext.Provider>\n  );\n};\n\nexport { ModalContext, ModalState };\n"]},"metadata":{},"sourceType":"module"}