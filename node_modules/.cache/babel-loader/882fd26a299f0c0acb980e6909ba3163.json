{"ast":null,"code":"const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nexport function calcWinner(squares) {\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: lines[i]\n      };\n    }\n  }\n\n  return null;\n}\nexport default function calcBestMove(squares, player) {\n  const getArrDuplicatedCount = arr => {\n    let count = 0;\n    arr.forEach(i => {\n      if (squares[i] === player) {\n        count += 1;\n      }\n    });\n    return count;\n  };\n\n  const sortedLines = lines.sort((a, b) => {\n    let acount = getArrDuplicatedCount(a);\n    let bcount = getArrDuplicatedCount(b);\n    return bcount - acount;\n  });\n\n  for (let i = 0; i < sortedLines.length; i++) {\n    let val = sortedLines[i].find(el => {\n      if (squares[el] === \"\") {\n        return el + \"\";\n      }\n\n      return null;\n    });\n\n    if (!val) {\n      continue;\n    }\n\n    return +val;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/BOUGRINE/Desktop/Tic tac Mo/src/helpers/calcSquares.js"],"names":["lines","calcWinner","squares","i","length","a","b","c","winner","line","calcBestMove","player","getArrDuplicatedCount","arr","count","forEach","sortedLines","sort","acount","bcount","val","find","el"],"mappings":"AAAA,MAAMA,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;AAWA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAClC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYP,KAAK,CAACG,CAAD,CAAvB;;AACA,QAAID,OAAO,CAACG,CAAD,CAAP,IAAcH,OAAO,CAACG,CAAD,CAAP,KAAeH,OAAO,CAACI,CAAD,CAApC,IAA2CJ,OAAO,CAACG,CAAD,CAAP,KAAeH,OAAO,CAACK,CAAD,CAArE,EAA0E;AACxE,aAAO;AAAEC,QAAAA,MAAM,EAAEN,OAAO,CAACG,CAAD,CAAjB;AAAsBI,QAAAA,IAAI,EAAET,KAAK,CAACG,CAAD;AAAjC,OAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;AAED,eAAe,SAASO,YAAT,CAAsBR,OAAtB,EAA+BS,MAA/B,EAAuC;AACpD,QAAMC,qBAAqB,GAAIC,GAAD,IAAS;AACrC,QAAIC,KAAK,GAAG,CAAZ;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAaZ,CAAD,IAAO;AACjB,UAAID,OAAO,CAACC,CAAD,CAAP,KAAeQ,MAAnB,EAA2B;AACzBG,QAAAA,KAAK,IAAI,CAAT;AACD;AACF,KAJD;AAKA,WAAOA,KAAP;AACD,GARD;;AAUA,QAAME,WAAW,GAAGhB,KAAK,CAACiB,IAAN,CAAW,CAACZ,CAAD,EAAIC,CAAJ,KAAU;AACvC,QAAIY,MAAM,GAAGN,qBAAqB,CAACP,CAAD,CAAlC;AACA,QAAIc,MAAM,GAAGP,qBAAqB,CAACN,CAAD,CAAlC;AACA,WAAOa,MAAM,GAAGD,MAAhB;AACD,GAJmB,CAApB;;AAMA,OAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,WAAW,CAACZ,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAIiB,GAAG,GAAGJ,WAAW,CAACb,CAAD,CAAX,CAAekB,IAAf,CAAqBC,EAAD,IAAQ;AACpC,UAAIpB,OAAO,CAACoB,EAAD,CAAP,KAAgB,EAApB,EAAwB;AACtB,eAAOA,EAAE,GAAG,EAAZ;AACD;;AACD,aAAO,IAAP;AACD,KALS,CAAV;;AAOA,QAAI,CAACF,GAAL,EAAU;AACR;AACD;;AACD,WAAO,CAACA,GAAR;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["const lines = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nexport function calcWinner(squares) {\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], line: lines[i] };\n    }\n  }\n  return null;\n}\n\nexport default function calcBestMove(squares, player) {\n  const getArrDuplicatedCount = (arr) => {\n    let count = 0;\n    arr.forEach((i) => {\n      if (squares[i] === player) {\n        count += 1;\n      }\n    });\n    return count;\n  };\n\n  const sortedLines = lines.sort((a, b) => {\n    let acount = getArrDuplicatedCount(a);\n    let bcount = getArrDuplicatedCount(b);\n    return bcount - acount;\n  });\n\n  for (let i = 0; i < sortedLines.length; i++) {\n    let val = sortedLines[i].find((el) => {\n      if (squares[el] === \"\") {\n        return el + \"\";\n      }\n      return null;\n    });\n\n    if (!val) {\n      continue;\n    }\n    return +val;\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}