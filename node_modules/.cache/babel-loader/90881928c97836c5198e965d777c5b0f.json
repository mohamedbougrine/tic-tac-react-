{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BOUGRINE\\\\Desktop\\\\Tic tac Mo\\\\src\\\\context\\\\GameContex.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState, useContext } from \"react\";\nimport calcBestMove, { calcWinner } from \"../helpers/calcSquares\";\nimport { ModalContext } from \"./ModalContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/createContext();\n\nconst GameState = props => {\n  _s();\n\n  const [screen, setScreen] = useState(\"start\"); // start || game\n\n  const [playMode, setPlayMode] = useState(\"user\"); // user || cpu\n\n  const [activeUser, setActiveUser] = useState(\"x\"); // x || o\n\n  const [squares, setSquares] = useState(new Array(9).fill(\"\"));\n  const [xnext, setXnext] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerLine, setWinnerLine] = useState(null);\n  const [ties, setTies] = useState({\n    x: 0,\n    o: 0\n  });\n  const {\n    showModal,\n    hideModal,\n    setModalMode\n  } = useContext(ModalContext);\n  useEffect(() => {\n    //check if cpu turn\n    let currentUser = xnext ? \"o\" : \"x\";\n\n    if (playMode === \"cpu\" && currentUser !== activeUser && !winner) {\n      cpuNextMove(squares);\n    }\n\n    checkNoWinner(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [xnext, winner, screen]);\n\n  const handleStart = player => {\n    setPlayMode(player);\n    setScreen(\"game\");\n  };\n\n  const handleSquareClick = ix => {\n    if (squares[ix] || winner) {\n      return;\n    }\n\n    let currentUser = xnext ? \"o\" : \"x\";\n\n    if (playMode === \"cpu\" && currentUser !== activeUser) {\n      return;\n    }\n\n    let ns = [...squares];\n    ns[ix] = !xnext ? \"x\" : \"o\";\n    setSquares(ns);\n    setXnext(!xnext);\n    checkWinner(ns);\n  };\n\n  const checkWinner = ns => {\n    const isWinner = calcWinner(ns);\n\n    if (isWinner) {\n      setWinner(isWinner.winner);\n      setWinnerLine(isWinner.line);\n      const nties = { ...ties\n      };\n      nties[isWinner.winner] += 1;\n      setTies(nties);\n      showModal();\n      setModalMode(\"winner\");\n    }\n  };\n\n  const cpuNextMove = sqrs => {\n    let bestmove = calcBestMove(sqrs, activeUser === \"x\" ? \"o\" : \"x\");\n    let ns = [...squares];\n    ns[bestmove] = !xnext ? \"x\" : \"o\";\n    setSquares(ns);\n    setXnext(!xnext);\n    checkWinner(ns);\n  };\n\n  const handleReset = () => {\n    setSquares(new Array(9).fill(\"\"));\n    setXnext(false);\n    setWinner(null);\n    setWinnerLine(null);\n    setActiveUser(\"x\");\n    setTies({\n      x: 0,\n      o: 0\n    });\n    hideModal();\n    setScreen(\"start\");\n  };\n\n  const handleNextRound = () => {\n    setSquares(new Array(9).fill(\"\"));\n    setXnext(winner === \"x\");\n    setWinner(null);\n    setWinnerLine(null);\n    hideModal();\n  };\n\n  const checkNoWinner = () => {\n    const moves = squares.filter(sq => sq === \"\");\n\n    if (moves.length === 0) {\n      setWinner(\"no\");\n      showModal();\n      setModalMode(\"winner\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      squares,\n      winner,\n      winnerLine,\n      xnext,\n      ties,\n      screen,\n      activeUser,\n      playMode,\n      handleStart,\n      setActiveUser,\n      setPlayMode,\n      setTies,\n      handleSquareClick,\n      handleReset,\n      handleNextRound\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameState, \"CPV/LUtA2xbGYqBG1YQZUXktpw8=\");\n\n_c = GameState;\nexport { GameContext, GameState };\n\nvar _c;\n\n$RefreshReg$(_c, \"GameState\");","map":{"version":3,"sources":["C:/Users/BOUGRINE/Desktop/Tic tac Mo/src/context/GameContex.js"],"names":["createContext","useEffect","useState","useContext","calcBestMove","calcWinner","ModalContext","GameContext","GameState","props","screen","setScreen","playMode","setPlayMode","activeUser","setActiveUser","squares","setSquares","Array","fill","xnext","setXnext","winner","setWinner","winnerLine","setWinnerLine","ties","setTies","x","o","showModal","hideModal","setModalMode","currentUser","cpuNextMove","checkNoWinner","handleStart","player","handleSquareClick","ix","ns","checkWinner","isWinner","line","nties","sqrs","bestmove","handleReset","handleNextRound","moves","filter","sq","length","children"],"mappings":"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","sourcesContent":["import { createContext, useEffect, useState, useContext } from \"react\";\nimport calcBestMove, { calcWinner } from \"../helpers/calcSquares\";\nimport { ModalContext } from \"./ModalContext\";\n\nconst GameContext = createContext();\n\nconst GameState = (props) => {\n  const [screen, setScreen] = useState(\"start\"); // start || game\n  const [playMode, setPlayMode] = useState(\"user\"); // user || cpu\n  const [activeUser, setActiveUser] = useState(\"x\"); // x || o\n  const [squares, setSquares] = useState(new Array(9).fill(\"\"));\n  const [xnext, setXnext] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [winnerLine, setWinnerLine] = useState(null);\n  const [ties, setTies] = useState({ x: 0, o: 0 });\n\n  const { showModal, hideModal, setModalMode } = useContext(ModalContext);\n\n  useEffect(() => {\n    //check if cpu turn\n    let currentUser = xnext ? \"o\" : \"x\";\n    if (playMode === \"cpu\" && currentUser !== activeUser && !winner) {\n      cpuNextMove(squares);\n    }\n    checkNoWinner();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [xnext, winner, screen]);\n\n  const handleStart = (player) => {\n    setPlayMode(player);\n    setScreen(\"game\");\n  };\n\n  const handleSquareClick = (ix) => {\n    if (squares[ix] || winner) {\n      return;\n    }\n    let currentUser = xnext ? \"o\" : \"x\";\n    if (playMode === \"cpu\" && currentUser !== activeUser) {\n      return;\n    }\n    let ns = [...squares];\n    ns[ix] = !xnext ? \"x\" : \"o\";\n    setSquares(ns);\n    setXnext(!xnext);\n    checkWinner(ns);\n  };\n\n  const checkWinner = (ns) => {\n    const isWinner = calcWinner(ns);\n    if (isWinner) {\n      setWinner(isWinner.winner);\n      setWinnerLine(isWinner.line);\n      const nties = { ...ties };\n      nties[isWinner.winner] += 1;\n      setTies(nties);\n      showModal();\n      setModalMode(\"winner\");\n    }\n  };\n\n  const cpuNextMove = (sqrs) => {\n    let bestmove = calcBestMove(sqrs, activeUser === \"x\" ? \"o\" : \"x\");\n    let ns = [...squares];\n    ns[bestmove] = !xnext ? \"x\" : \"o\";\n    setSquares(ns);\n    setXnext(!xnext);\n    checkWinner(ns);\n  };\n\n  const handleReset = () => {\n    setSquares(new Array(9).fill(\"\"));\n    setXnext(false);\n    setWinner(null);\n    setWinnerLine(null);\n    setActiveUser(\"x\");\n    setTies({ x: 0, o: 0 });\n    hideModal();\n    setScreen(\"start\");\n  };\n\n  const handleNextRound = () => {\n    setSquares(new Array(9).fill(\"\"));\n    setXnext(winner === \"x\");\n    setWinner(null);\n    setWinnerLine(null);\n    hideModal();\n  };\n\n  const checkNoWinner = () => {\n    const moves = squares.filter((sq) => sq === \"\");\n    if (moves.length === 0) {\n      setWinner(\"no\");\n      showModal();\n      setModalMode(\"winner\");\n    }\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        squares,\n        winner,\n        winnerLine,\n        xnext,\n        ties,\n        screen,\n        activeUser,\n        playMode,\n        handleStart,\n        setActiveUser,\n        setPlayMode,\n        setTies,\n        handleSquareClick,\n        handleReset,\n        handleNextRound,\n      }}\n    >\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n\nexport { GameContext, GameState };\n"]},"metadata":{},"sourceType":"module"}